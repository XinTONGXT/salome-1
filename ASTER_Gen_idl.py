# Python stubs generated by omniidl from salome/ASTER_Gen.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "SALOME_GenericObj.idl"
import SALOME_GenericObj_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOME_Exception.idl"
import SALOME_Exception_idl
_0_SALOME = omniORB.openModule("SALOME")
_0_SALOME__POA = omniORB.openModule("SALOME__POA")
# #include "SALOMEDS.idl"
import SALOMEDS_idl
_0_SALOMEDS = omniORB.openModule("SALOMEDS")
_0_SALOMEDS__POA = omniORB.openModule("SALOMEDS__POA")
# #include "SALOME_PyNode.idl"
import SALOME_PyNode_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")
# #include "SALOME_Component.idl"
import SALOME_Component_idl
_0_Engines = omniORB.openModule("Engines")
_0_Engines__POA = omniORB.openModule("Engines__POA")
# #include "SALOME_Parametric.idl"
import SALOME_Parametric_idl
_0_SALOME_TYPES = omniORB.openModule("SALOME_TYPES")
_0_SALOME_TYPES__POA = omniORB.openModule("SALOME_TYPES__POA")

#
# Start of module "ASTER_ORB"
#
__name__ = "ASTER_ORB"
_0_ASTER_ORB = omniORB.openModule("ASTER_ORB", r"salome/ASTER_Gen.idl")
_0_ASTER_ORB__POA = omniORB.openModule("ASTER_ORB__POA", r"salome/ASTER_Gen.idl")


# interface Elt
_0_ASTER_ORB._d_Elt = (omniORB.tcInternal.tv_objref, "IDL:ASTER_ORB/Elt:1.0", "Elt")
omniORB.typeMapping["IDL:ASTER_ORB/Elt:1.0"] = _0_ASTER_ORB._d_Elt
_0_ASTER_ORB.Elt = omniORB.newEmptyClass()
class Elt :
    _NP_RepositoryId = _0_ASTER_ORB._d_Elt[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ASTER_ORB.Elt = Elt
_0_ASTER_ORB._tc_Elt = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._d_Elt)
omniORB.registerType(Elt._NP_RepositoryId, _0_ASTER_ORB._d_Elt, _0_ASTER_ORB._tc_Elt)

# Elt operations and attributes
Elt._d_GetEntry = ((), ((omniORB.tcInternal.tv_string,0), ), None)

# Elt object reference
class _objref_Elt (CORBA.Object):
    _NP_RepositoryId = Elt._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def GetEntry(self, *args):
        return _omnipy.invoke(self, "GetEntry", _0_ASTER_ORB.Elt._d_GetEntry, args)

    __methods__ = ["GetEntry"] + CORBA.Object.__methods__

omniORB.registerObjref(Elt._NP_RepositoryId, _objref_Elt)
_0_ASTER_ORB._objref_Elt = _objref_Elt
del Elt, _objref_Elt

# Elt skeleton
__name__ = "ASTER_ORB__POA"
class Elt (PortableServer.Servant):
    _NP_RepositoryId = _0_ASTER_ORB.Elt._NP_RepositoryId


    _omni_op_d = {"GetEntry": _0_ASTER_ORB.Elt._d_GetEntry}

Elt._omni_skeleton = Elt
_0_ASTER_ORB__POA.Elt = Elt
omniORB.registerSkeleton(Elt._NP_RepositoryId, Elt)
del Elt
__name__ = "ASTER_ORB"

# enum EltType
_0_ASTER_ORB.WorkingDir = omniORB.EnumItem("WorkingDir", 0)
_0_ASTER_ORB.CommFile = omniORB.EnumItem("CommFile", 1)
_0_ASTER_ORB.MedFile = omniORB.EnumItem("MedFile", 2)
_0_ASTER_ORB.SMeshEntry = omniORB.EnumItem("SMeshEntry", 3)
_0_ASTER_ORB.RemoveRmed = omniORB.EnumItem("RemoveRmed", 4)
_0_ASTER_ORB.ExportFile = omniORB.EnumItem("ExportFile", 5)
_0_ASTER_ORB.MessFile = omniORB.EnumItem("MessFile", 6)
_0_ASTER_ORB.ResuFile = omniORB.EnumItem("ResuFile", 7)
_0_ASTER_ORB.RMedFile = omniORB.EnumItem("RMedFile", 8)
_0_ASTER_ORB.EltType = omniORB.Enum("IDL:ASTER_ORB/EltType:1.0", (_0_ASTER_ORB.WorkingDir, _0_ASTER_ORB.CommFile, _0_ASTER_ORB.MedFile, _0_ASTER_ORB.SMeshEntry, _0_ASTER_ORB.RemoveRmed, _0_ASTER_ORB.ExportFile, _0_ASTER_ORB.MessFile, _0_ASTER_ORB.ResuFile, _0_ASTER_ORB.RMedFile,))

_0_ASTER_ORB._d_EltType  = (omniORB.tcInternal.tv_enum, _0_ASTER_ORB.EltType._NP_RepositoryId, "EltType", _0_ASTER_ORB.EltType._items)
_0_ASTER_ORB._tc_EltType = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._d_EltType)
omniORB.registerType(_0_ASTER_ORB.EltType._NP_RepositoryId, _0_ASTER_ORB._d_EltType, _0_ASTER_ORB._tc_EltType)

# enum JobStatus
_0_ASTER_ORB.Running = omniORB.EnumItem("Running", 0)
_0_ASTER_ORB.Ended = omniORB.EnumItem("Ended", 1)
_0_ASTER_ORB.Success = omniORB.EnumItem("Success", 2)
_0_ASTER_ORB.Alarm = omniORB.EnumItem("Alarm", 3)
_0_ASTER_ORB.Failure = omniORB.EnumItem("Failure", 4)
_0_ASTER_ORB.Unknown = omniORB.EnumItem("Unknown", 5)
_0_ASTER_ORB.JobStatus = omniORB.Enum("IDL:ASTER_ORB/JobStatus:1.0", (_0_ASTER_ORB.Running, _0_ASTER_ORB.Ended, _0_ASTER_ORB.Success, _0_ASTER_ORB.Alarm, _0_ASTER_ORB.Failure, _0_ASTER_ORB.Unknown,))

_0_ASTER_ORB._d_JobStatus  = (omniORB.tcInternal.tv_enum, _0_ASTER_ORB.JobStatus._NP_RepositoryId, "JobStatus", _0_ASTER_ORB.JobStatus._items)
_0_ASTER_ORB._tc_JobStatus = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._d_JobStatus)
omniORB.registerType(_0_ASTER_ORB.JobStatus._NP_RepositoryId, _0_ASTER_ORB._d_JobStatus, _0_ASTER_ORB._tc_JobStatus)

# interface Job
_0_ASTER_ORB._d_Job = (omniORB.tcInternal.tv_objref, "IDL:ASTER_ORB/Job:1.0", "Job")
omniORB.typeMapping["IDL:ASTER_ORB/Job:1.0"] = _0_ASTER_ORB._d_Job
_0_ASTER_ORB.Job = omniORB.newEmptyClass()
class Job :
    _NP_RepositoryId = _0_ASTER_ORB._d_Job[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ASTER_ORB.Job = Job
_0_ASTER_ORB._tc_Job = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._d_Job)
omniORB.registerType(Job._NP_RepositoryId, _0_ASTER_ORB._d_Job, _0_ASTER_ORB._tc_Job)

# Job operations and attributes
Job._d_Status = ((), (omniORB.typeMapping["IDL:ASTER_ORB/JobStatus:1.0"], ), None)
Job._d_ResStatus = ((), (omniORB.typeMapping["IDL:ASTER_ORB/JobStatus:1.0"], ), None)
Job._d_WaitResult = ((), (omniORB.typeMapping["IDL:ASTER_ORB/JobStatus:1.0"], ), None)
Job._d_Kill = ((), (), None)

# Job object reference
class _objref_Job (CORBA.Object):
    _NP_RepositoryId = Job._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def Status(self, *args):
        return _omnipy.invoke(self, "Status", _0_ASTER_ORB.Job._d_Status, args)

    def ResStatus(self, *args):
        return _omnipy.invoke(self, "ResStatus", _0_ASTER_ORB.Job._d_ResStatus, args)

    def WaitResult(self, *args):
        return _omnipy.invoke(self, "WaitResult", _0_ASTER_ORB.Job._d_WaitResult, args)

    def Kill(self, *args):
        return _omnipy.invoke(self, "Kill", _0_ASTER_ORB.Job._d_Kill, args)

    __methods__ = ["Status", "ResStatus", "WaitResult", "Kill"] + CORBA.Object.__methods__

omniORB.registerObjref(Job._NP_RepositoryId, _objref_Job)
_0_ASTER_ORB._objref_Job = _objref_Job
del Job, _objref_Job

# Job skeleton
__name__ = "ASTER_ORB__POA"
class Job (PortableServer.Servant):
    _NP_RepositoryId = _0_ASTER_ORB.Job._NP_RepositoryId


    _omni_op_d = {"Status": _0_ASTER_ORB.Job._d_Status, "ResStatus": _0_ASTER_ORB.Job._d_ResStatus, "WaitResult": _0_ASTER_ORB.Job._d_WaitResult, "Kill": _0_ASTER_ORB.Job._d_Kill}

Job._omni_skeleton = Job
_0_ASTER_ORB__POA.Job = Job
omniORB.registerSkeleton(Job._NP_RepositoryId, Job)
del Job
__name__ = "ASTER_ORB"

# interface StudyCase
_0_ASTER_ORB._d_StudyCase = (omniORB.tcInternal.tv_objref, "IDL:ASTER_ORB/StudyCase:1.0", "StudyCase")
omniORB.typeMapping["IDL:ASTER_ORB/StudyCase:1.0"] = _0_ASTER_ORB._d_StudyCase
_0_ASTER_ORB.StudyCase = omniORB.newEmptyClass()
class StudyCase (_0_ASTER_ORB.Elt):
    _NP_RepositoryId = _0_ASTER_ORB._d_StudyCase[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ASTER_ORB.StudyCase = StudyCase
_0_ASTER_ORB._tc_StudyCase = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._d_StudyCase)
omniORB.registerType(StudyCase._NP_RepositoryId, _0_ASTER_ORB._d_StudyCase, _0_ASTER_ORB._tc_StudyCase)

# StudyCase operations and attributes
StudyCase._d_ReadName = ((), ((omniORB.tcInternal.tv_string,0), ), None)
StudyCase._d_Use = ((omniORB.typeMapping["IDL:ASTER_ORB/EltType:1.0"], ), (), None)
StudyCase._d_UseStr = ((omniORB.typeMapping["IDL:ASTER_ORB/EltType:1.0"], (omniORB.tcInternal.tv_string,0)), (), None)
StudyCase._d_Run = ((), (omniORB.typeMapping["IDL:ASTER_ORB/Job:1.0"], ), None)
StudyCase._d_ResultFileName = ((omniORB.typeMapping["IDL:ASTER_ORB/EltType:1.0"], ), ((omniORB.tcInternal.tv_string,0), ), None)

# StudyCase object reference
class _objref_StudyCase (_0_ASTER_ORB._objref_Elt):
    _NP_RepositoryId = StudyCase._NP_RepositoryId

    def __init__(self):
        _0_ASTER_ORB._objref_Elt.__init__(self)

    def ReadName(self, *args):
        return _omnipy.invoke(self, "ReadName", _0_ASTER_ORB.StudyCase._d_ReadName, args)

    def Use(self, *args):
        return _omnipy.invoke(self, "Use", _0_ASTER_ORB.StudyCase._d_Use, args)

    def UseStr(self, *args):
        return _omnipy.invoke(self, "UseStr", _0_ASTER_ORB.StudyCase._d_UseStr, args)

    def Run(self, *args):
        return _omnipy.invoke(self, "Run", _0_ASTER_ORB.StudyCase._d_Run, args)

    def ResultFileName(self, *args):
        return _omnipy.invoke(self, "ResultFileName", _0_ASTER_ORB.StudyCase._d_ResultFileName, args)

    __methods__ = ["ReadName", "Use", "UseStr", "Run", "ResultFileName"] + _0_ASTER_ORB._objref_Elt.__methods__

omniORB.registerObjref(StudyCase._NP_RepositoryId, _objref_StudyCase)
_0_ASTER_ORB._objref_StudyCase = _objref_StudyCase
del StudyCase, _objref_StudyCase

# StudyCase skeleton
__name__ = "ASTER_ORB__POA"
class StudyCase (_0_ASTER_ORB__POA.Elt):
    _NP_RepositoryId = _0_ASTER_ORB.StudyCase._NP_RepositoryId


    _omni_op_d = {"ReadName": _0_ASTER_ORB.StudyCase._d_ReadName, "Use": _0_ASTER_ORB.StudyCase._d_Use, "UseStr": _0_ASTER_ORB.StudyCase._d_UseStr, "Run": _0_ASTER_ORB.StudyCase._d_Run, "ResultFileName": _0_ASTER_ORB.StudyCase._d_ResultFileName}
    _omni_op_d.update(_0_ASTER_ORB__POA.Elt._omni_op_d)

StudyCase._omni_skeleton = StudyCase
_0_ASTER_ORB__POA.StudyCase = StudyCase
omniORB.registerSkeleton(StudyCase._NP_RepositoryId, StudyCase)
del StudyCase
__name__ = "ASTER_ORB"

# enum CaseType
_0_ASTER_ORB.FromComm = omniORB.EnumItem("FromComm", 0)
_0_ASTER_ORB.FromExport = omniORB.EnumItem("FromExport", 1)
_0_ASTER_ORB.CaseType = omniORB.Enum("IDL:ASTER_ORB/CaseType:1.0", (_0_ASTER_ORB.FromComm, _0_ASTER_ORB.FromExport,))

_0_ASTER_ORB._d_CaseType  = (omniORB.tcInternal.tv_enum, _0_ASTER_ORB.CaseType._NP_RepositoryId, "CaseType", _0_ASTER_ORB.CaseType._items)
_0_ASTER_ORB._tc_CaseType = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._d_CaseType)
omniORB.registerType(_0_ASTER_ORB.CaseType._NP_RepositoryId, _0_ASTER_ORB._d_CaseType, _0_ASTER_ORB._tc_CaseType)

# typedef ... StudyCases
class StudyCases:
    _NP_RepositoryId = "IDL:ASTER_ORB/StudyCases:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ASTER_ORB.StudyCases = StudyCases
_0_ASTER_ORB._d_StudyCases  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ASTER_ORB/StudyCase:1.0"], 0)
_0_ASTER_ORB._ad_StudyCases = (omniORB.tcInternal.tv_alias, StudyCases._NP_RepositoryId, "StudyCases", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ASTER_ORB/StudyCase:1.0"], 0))
_0_ASTER_ORB._tc_StudyCases = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._ad_StudyCases)
omniORB.registerType(StudyCases._NP_RepositoryId, _0_ASTER_ORB._ad_StudyCases, _0_ASTER_ORB._tc_StudyCases)
del StudyCases

# interface Study
_0_ASTER_ORB._d_Study = (omniORB.tcInternal.tv_objref, "IDL:ASTER_ORB/Study:1.0", "Study")
omniORB.typeMapping["IDL:ASTER_ORB/Study:1.0"] = _0_ASTER_ORB._d_Study
_0_ASTER_ORB.Study = omniORB.newEmptyClass()
class Study (_0_ASTER_ORB.Elt):
    _NP_RepositoryId = _0_ASTER_ORB._d_Study[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ASTER_ORB.Study = Study
_0_ASTER_ORB._tc_Study = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._d_Study)
omniORB.registerType(Study._NP_RepositoryId, _0_ASTER_ORB._d_Study, _0_ASTER_ORB._tc_Study)

# Study operations and attributes
Study._d_AddCase = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:ASTER_ORB/CaseType:1.0"]), (omniORB.typeMapping["IDL:ASTER_ORB/StudyCase:1.0"], ), None)
Study._d_GiveCases = ((), (omniORB.typeMapping["IDL:ASTER_ORB/StudyCases:1.0"], ), None)

# Study object reference
class _objref_Study (_0_ASTER_ORB._objref_Elt):
    _NP_RepositoryId = Study._NP_RepositoryId

    def __init__(self):
        _0_ASTER_ORB._objref_Elt.__init__(self)

    def AddCase(self, *args):
        return _omnipy.invoke(self, "AddCase", _0_ASTER_ORB.Study._d_AddCase, args)

    def GiveCases(self, *args):
        return _omnipy.invoke(self, "GiveCases", _0_ASTER_ORB.Study._d_GiveCases, args)

    __methods__ = ["AddCase", "GiveCases"] + _0_ASTER_ORB._objref_Elt.__methods__

omniORB.registerObjref(Study._NP_RepositoryId, _objref_Study)
_0_ASTER_ORB._objref_Study = _objref_Study
del Study, _objref_Study

# Study skeleton
__name__ = "ASTER_ORB__POA"
class Study (_0_ASTER_ORB__POA.Elt):
    _NP_RepositoryId = _0_ASTER_ORB.Study._NP_RepositoryId


    _omni_op_d = {"AddCase": _0_ASTER_ORB.Study._d_AddCase, "GiveCases": _0_ASTER_ORB.Study._d_GiveCases}
    _omni_op_d.update(_0_ASTER_ORB__POA.Elt._omni_op_d)

Study._omni_skeleton = Study
_0_ASTER_ORB__POA.Study = Study
omniORB.registerSkeleton(Study._NP_RepositoryId, Study)
del Study
__name__ = "ASTER_ORB"

# interface ASTER_Gen
_0_ASTER_ORB._d_ASTER_Gen = (omniORB.tcInternal.tv_objref, "IDL:ASTER_ORB/ASTER_Gen:1.0", "ASTER_Gen")
omniORB.typeMapping["IDL:ASTER_ORB/ASTER_Gen:1.0"] = _0_ASTER_ORB._d_ASTER_Gen
_0_ASTER_ORB.ASTER_Gen = omniORB.newEmptyClass()
class ASTER_Gen (_0_Engines.EngineComponent, _0_SALOMEDS.Driver):
    _NP_RepositoryId = _0_ASTER_ORB._d_ASTER_Gen[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ASTER_ORB.ASTER_Gen = ASTER_Gen
_0_ASTER_ORB._tc_ASTER_Gen = omniORB.tcInternal.createTypeCode(_0_ASTER_ORB._d_ASTER_Gen)
omniORB.registerType(ASTER_Gen._NP_RepositoryId, _0_ASTER_ORB._d_ASTER_Gen, _0_ASTER_ORB._tc_ASTER_Gen)

# ASTER_Gen operations and attributes
ASTER_Gen._d_AttachTo = ((omniORB.typeMapping["IDL:SALOMEDS/Study:1.0"], ), (omniORB.typeMapping["IDL:ASTER_ORB/Study:1.0"], ), None)
ASTER_Gen._d_GiveAsterVersion = ((), ((omniORB.tcInternal.tv_string,0), ), None)
ASTER_Gen._d_Init = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:SALOMEDS/ID:1.0"]), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
ASTER_Gen._d_Exec = ((omniORB.typeMapping["IDL:SALOME_TYPES/ParametricInput:1.0"], ), (omniORB.typeMapping["IDL:SALOME_TYPES/ParametricOutput:1.0"], ), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
ASTER_Gen._d_Finalize = ((), (), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})
ASTER_Gen._d_GetFilesToTransfer = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:SALOMEDS/ID:1.0"]), (omniORB.typeMapping["IDL:SALOMEDS/ListOfStrings:1.0"], omniORB.typeMapping["IDL:SALOMEDS/ListOfStrings:1.0"]), {_0_SALOME.SALOME_Exception._NP_RepositoryId: _0_SALOME._d_SALOME_Exception})

# ASTER_Gen object reference
class _objref_ASTER_Gen (_0_Engines._objref_EngineComponent, _0_SALOMEDS._objref_Driver):
    _NP_RepositoryId = ASTER_Gen._NP_RepositoryId

    def __init__(self):
        _0_Engines._objref_EngineComponent.__init__(self)
        _0_SALOMEDS._objref_Driver.__init__(self)

    def AttachTo(self, *args):
        return _omnipy.invoke(self, "AttachTo", _0_ASTER_ORB.ASTER_Gen._d_AttachTo, args)

    def GiveAsterVersion(self, *args):
        return _omnipy.invoke(self, "GiveAsterVersion", _0_ASTER_ORB.ASTER_Gen._d_GiveAsterVersion, args)

    def Init(self, *args):
        return _omnipy.invoke(self, "Init", _0_ASTER_ORB.ASTER_Gen._d_Init, args)

    def Exec(self, *args):
        return _omnipy.invoke(self, "Exec", _0_ASTER_ORB.ASTER_Gen._d_Exec, args)

    def Finalize(self, *args):
        return _omnipy.invoke(self, "Finalize", _0_ASTER_ORB.ASTER_Gen._d_Finalize, args)

    def GetFilesToTransfer(self, *args):
        return _omnipy.invoke(self, "GetFilesToTransfer", _0_ASTER_ORB.ASTER_Gen._d_GetFilesToTransfer, args)

    __methods__ = ["AttachTo", "GiveAsterVersion", "Init", "Exec", "Finalize", "GetFilesToTransfer"] + _0_Engines._objref_EngineComponent.__methods__ + _0_SALOMEDS._objref_Driver.__methods__

omniORB.registerObjref(ASTER_Gen._NP_RepositoryId, _objref_ASTER_Gen)
_0_ASTER_ORB._objref_ASTER_Gen = _objref_ASTER_Gen
del ASTER_Gen, _objref_ASTER_Gen

# ASTER_Gen skeleton
__name__ = "ASTER_ORB__POA"
class ASTER_Gen (_0_Engines__POA.EngineComponent, _0_SALOMEDS__POA.Driver):
    _NP_RepositoryId = _0_ASTER_ORB.ASTER_Gen._NP_RepositoryId


    _omni_op_d = {"AttachTo": _0_ASTER_ORB.ASTER_Gen._d_AttachTo, "GiveAsterVersion": _0_ASTER_ORB.ASTER_Gen._d_GiveAsterVersion, "Init": _0_ASTER_ORB.ASTER_Gen._d_Init, "Exec": _0_ASTER_ORB.ASTER_Gen._d_Exec, "Finalize": _0_ASTER_ORB.ASTER_Gen._d_Finalize, "GetFilesToTransfer": _0_ASTER_ORB.ASTER_Gen._d_GetFilesToTransfer}
    _omni_op_d.update(_0_Engines__POA.EngineComponent._omni_op_d)
    _omni_op_d.update(_0_SALOMEDS__POA.Driver._omni_op_d)

ASTER_Gen._omni_skeleton = ASTER_Gen
_0_ASTER_ORB__POA.ASTER_Gen = ASTER_Gen
omniORB.registerSkeleton(ASTER_Gen._NP_RepositoryId, ASTER_Gen)
del ASTER_Gen
__name__ = "ASTER_ORB"

#
# End of module "ASTER_ORB"
#
__name__ = "ASTER_Gen_idl"

_exported_modules = ( "ASTER_ORB", )

# The end.
